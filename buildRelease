#!/bin/bash

#
# Infomaniak SwissTransfer - Multiplatform
# Copyright (C) 2024 Infomaniak Network SA
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

# Variables
BOLD=$(tput bold)
BOLD_OFF=$(tput sgr0)
GREEN='\033[0;32m'
GREEN_BOLD='\033[1;32m'
COLOR_OFF='\033[0m'

# Function to check whether a string is a valid version (x.x.x)
function is_valid_version {
    if [[ $1 =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        return 0
    else
        return 1
    fi
}

# Function to display documentation
function show_help {
    echo "Usage: $0 <version> [--ios | --android]"
    echo "  <version>   The version number in the format x.x.x"
    echo "  --ios       Release for iOS platform only"
    echo "  --android   Release for Android platform only"
    echo "Examples:"
    echo "  $0 1.2.3"
    echo "  $0 1.2.3 --ios"
    echo "  $0 1.2.3 --android"
}

function release_android {
    echo "Releasing Android version $1"
    sed -i '' "s|mavenVersionName = \".*\"|mavenVersionName = \"$1\"|g" buildTools/gradle/src/main/kotlin/com/infomaniak/gradle/utils/Versions.kt
}

function release_ios {
    IOS_TAG=$1
    echo "Releasing iOS version $1"
    echo "Deletes all old caches"
    ./gradlew clean
    rm -rf build # We delete to avoid caching problems
    rm -rf .gradle # We delete to avoid caching problems
    rm -rf release # The release folder contains the old archives

    # Build
    echo "Build all Modules for XCFrameworks"
    ./gradlew :STNetwork:assembleSTNetworkReleaseXCFramework
    ./gradlew :STDatabase:assembleSTDatabaseReleaseXCFramework
    ./gradlew :STCore:assembleSTCoreReleaseXCFramework

    # Archive
    echo "Archive XCFramework to ${BOLD}release${BOLD_OFF} folder"
    mkdir -p release
    zip -r release/STNetwork.xcframework.zip STNetwork/build/XCFrameworks/release/STNetwork.xcframework
    zip -r release/STDatabase.xcframework.zip STDatabase/build/XCFrameworks/release/STDatabase.xcframework
    zip -r release/STCore.xcframework.zip STCore/build/XCFrameworks/release/STCore.xcframework

    # Calculate checksums
    echo "Calculate modules checksums from release folder"
    NETWORK_CHECKSUM=$(swift package compute-checksum release/STNetwork.xcframework.zip)
    DATABASE_CHECKSUM=$(swift package compute-checksum release/STDatabase.xcframework.zip)
    CORE_CHECKSUM=$(swift package compute-checksum release/STCore.xcframework.zip)

    # Update Package.swift
    echo "${BOLD}Update Package.swift${BOLD_OFF}"
    NETWORK_URL="https://github.com/Infomaniak/multiplatform-SwissTransfer/releases/download/$IOS_TAG/STNetwork.xcframework.zip"
    DATABASE_URL="https://github.com/Infomaniak/multiplatform-SwissTransfer/releases/download/$IOS_TAG/STDatabase.xcframework.zip"
    CORE_URL="https://github.com/Infomaniak/multiplatform-SwissTransfer/releases/download/$IOS_TAG/STCore.xcframework.zip"
    # With the `sed` command the regex doesn't work, whereas with the `perl` command it does.
    perl -0777 -pi -e "s|url: \".*Network.xcframework.zip\",(\s*)checksum: \".*\"|url: \"$NETWORK_URL\",\1checksum: \"$NETWORK_CHECKSUM\"|g" Package.swift
    perl -0777 -pi -e "s|url: \".*Database.xcframework.zip\",(\s*)checksum: \".*\"|url: \"$DATABASE_URL\",\1checksum: \"$DATABASE_CHECKSUM\"|g" Package.swift
    perl -0777 -pi -e "s|url: \".*Core.xcframework.zip\",(\s*)checksum: \".*\"|url: \"$CORE_URL\",\1checksum: \"$CORE_CHECKSUM\"|g" Package.swift

    # Upload info
    echo -e "${GREEN}Check the${COLOR_OFF} ${GREEN_BOLD}release${COLOR_OFF} ${GREEN}folder to see if the archives are there, then you can upload them to a GitHub release.${COLOR_OFF}"
}

# Release Android and iOS
function release_both {
    echo "Releasing both iOS and Android version $1"
    release_android "$1"
    release_ios "$1"
}

# Check arguments, if no arguments are supplied, the documentation is displayed
if [ $# -eq 0 ]; then
    show_help
    exit 1
fi

VERSION=$1

if ! is_valid_version "$VERSION"; then
    echo "Error: Invalid version format. It should be x.x.x"
    show_help
    exit 1
fi

# No options have been provided, so release of both iOS and Android versions
if [ $# -eq 1 ]; then
    release_both "$VERSION"
    exit 0
fi

# An option has been provided
OPTION=$2

if [[ "$OPTION" == "--ios" ]]; then
    release_ios "$VERSION"
elif [[ "$OPTION" == "--android" ]]; then
    release_android "$VERSION"
else
    echo "Error: Invalid option $OPTION"
    show_help
    exit 1
fi
